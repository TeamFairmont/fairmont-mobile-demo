{"version":3,"file":"Shared.js","sourceRoot":"","sources":["../../scripts/Shared.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport {PageManager} from 'PageManager';\nimport * as React from \"react\"\nimport * as ReactDOM from \"react-dom\"\n\ndeclare var ons:any;\n\nexport var pageManager:PageManager = new PageManager();\nexport const VERSION:string = \"1.0.0\";\n\n//Note: This is using hard coded simple auth. HMAC auth is recommended for production and requires some crypto\nvar boltUrlBase:string = \"http://\"+window.location.hostname+\":8888/\";\nvar username:string = \"publicweb\";\nvar userkey:string = \"webaccess1\";\nvar retryMs:number = 1000;\n\n/**\n * boltCall makes an api call and return the result to the callback if complete. if not, show \n * loading modal until request completes, then call the callback. resultcb may be called multiple times\n * if the call has data but is not complete!\n */\nexport function boltCall(apicall:string, payload:any, resultcb:(result:any)=>void) {\n    $.ajax({\n        url: boltUrlBase+\"request/\"+apicall,\n        type: \"POST\",\n        data: JSON.stringify(payload),\n        beforeSend: function (xhr) {\n            xhr.setRequestHeader (\"Authorization\", \"Basic \" + btoa(username + \":\" + userkey));\n        },\n        success: (data:any, status:string) => {\n            //console.log(data);\n            if (data.complete) {\n                resultcb(data);\n            } else {\n                boltRepeatCall(data.id, resultcb, 1);\n            }           \n        },\n        error: ()=>{\n            console.log(\"Request error\");\n            resultcb({error:\"request\"});\n        },\n    });\n}\n\nfunction boltRepeatCall(id:string, resultcb:(result:any)=>void, attempt:number) {\n    var loading =document.querySelector(\"#loading\") as any;\n    loading.show();\n    if (attempt>10) {\n        loading.hide();\n        ons.notification.alert(\"We couldn't load the page you requested! Please go back and try again.\");\n        resultcb({error:\"request\"});\n        return\n    }\n\n    setTimeout(()=> {\n        $.ajax({\n            url: boltUrlBase+\"retr/peek/\"+id,\n            type: \"POST\",\n            data: \"{}\",\n            beforeSend: function (xhr) {\n                xhr.setRequestHeader (\"Authorization\", \"Basic \" + btoa(username + \":\" + userkey));\n            },\n            success: (data:any, status:string) => {\n                //console.log(data);\n                if (data.complete) {\n                    loading.hide();\n                    resultcb(data);\n                } else {\n                    boltRepeatCall(id, resultcb, attempt+1);\n                }\n            },\n            error: ()=>{\n                console.log(\"Request retry error\");\n                resultcb({error:\"request\"});\n            },\n        });\n    }, retryMs);\n}"]}